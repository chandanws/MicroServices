

buildscript {
	ext {
		springBootVersion = '1.5.12.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}


plugins {
	id 'net.ltgt.apt' version '0.10'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'application'

group = 'com.microservicePlayground'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Edgware.SR3'
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}
dependencies {

	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	//compile('org.springframework.boot:spring-boot-starter-web')
	// Config server
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-config-client')
	//decode config property
	compile "org.springframework.security:spring-security-rsa"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	//Eureka server
	compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
	//feign// changed to open feign
	compile('org.springframework.cloud:spring-cloud-starter-openfeign')
	
	//Hystrix
	compile('org.springframework.cloud:spring-cloud-starter-hystrix')
		
	//Mysql
	runtime('mysql:mysql-connector-java')
	//MapStruct
	compile 'org.mapstruct:mapstruct-jdk8:1.1.0.Final'                       
	apt 'org.mapstruct:mapstruct-processor:1.1.0.Final'
	
	//log4j
	compile 'org.springframework.boot:spring-boot-starter-log4j2'
	
	//JMS
	compile 'org.springframework.cloud:spring-cloud-stream'
	compile 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	
	
	//RIBBON
	compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
	// spring Retry 
	 compile 'org.springframework.retry:spring-retry'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	//OAuth 2
	compile('org.springframework.cloud:spring-cloud-starter-oauth2')
	compile "org.springframework.security:spring-security-jwt"
	compile "org.springframework.cloud:spring-cloud-security"
	

compile group: 'commons-io', name: 'commons-io', version: '2.6'

//Sleuth
compile "org.springframework.cloud:spring-cloud-starter-sleuth"
	
}

docker {
    maintainer = 'chandresh.mishra <chandresh.mishra@accenture.com>'
    
}

task buildDocker(type: Docker, dependsOn: build) {
  //push = true
  applicationName = 'personmicroservice'
  tagVersion = '1.0'
  dockerfile = file("${buildDir}/docker/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
      from "src/main/docker/"
      into "${buildDir}/docker"
    }
  }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

