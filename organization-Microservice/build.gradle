buildscript {
	ext {
		springBootVersion = '1.5.12.RELEASE'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'se.transmode.gradle:gradle-docker:1.2'
		 classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.9.1"
	}
}

plugins {
	id 'net.ltgt.apt' version '0.10'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'application'
apply plugin: "com.commercehub.gradle.plugin.avro"

group = 'com.microservicePlayground'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Edgware.SR3'
}

sourceSets {
    mapStructGenerated {
        java.srcDir "${buildDir}/generated/source/apt/main"
    }
    main {
        runtimeClasspath += sourceSets.mapStructGenerated.output
    }
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/resources/avro")
    outputDir = file("${buildDir}/generated/source/apt/main")
    fieldVisibility = "PRIVATE"
    outputCharacterEncoding = "UTF-8"
}

dependencies {
// Eureka
	compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
	
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.cloud:spring-cloud-starter')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	// config
	compile('org.springframework.cloud:spring-cloud-config-client')
	// 
	compile "org.springframework.security:spring-security-rsa"
	compile "org.springframework.boot:spring-boot-starter-actuator"
	
	runtime('mysql:mysql-connector-java')
	//Mapper
	compile 'org.mapstruct:mapstruct-jdk8:1.1.0.Final'                       
	apt 'org.mapstruct:mapstruct-processor:1.1.0.Final'
	
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	//Sleuth
compile "org.springframework.cloud:spring-cloud-starter-sleuth"

//Spring cloud Stream JMS
	compile 'org.springframework.cloud:spring-cloud-stream'
	compile 'org.springframework.cloud:spring-cloud-starter-stream-rabbit'
	compile('org.springframework.cloud:spring-cloud-stream-schema')
	
	//spring cloud bus for config refresh
compile  "org.springframework.cloud:spring-cloud-starter-bus-amqp"
}

docker {
    maintainer = 'chandresh.mishra <chandresh.mishra@accenture.com>'
    
}

task buildDocker(type: Docker, dependsOn: build) {
  //push = true
  applicationName = 'organizationmicroservice'
  tagVersion = '1.0'
  dockerfile = file("${buildDir}/docker/Dockerfile")
  doFirst {
    copy {
      from jar
      into stageDir
      from "src/main/docker/"
      into "${buildDir}/docker"
    }
  }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
